// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace OrganizationRegister.AcceptanceTests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class ClassificationFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Classification.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Classification", "", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null) 
                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "Classification")))
            {
                OrganizationRegister.AcceptanceTests.Features.ClassificationFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Getting ordered life event hierarchy")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Classification")]
        public virtual void GettingOrderedLifeEventHierarchy()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Getting ordered life event hierarchy", ((string[])(null)));
#line 3
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Parent",
                        "Order"});
            table1.AddRow(new string[] {
                        "Getting a child",
                        "",
                        "1"});
            table1.AddRow(new string[] {
                        "Adoption",
                        "Getting a child",
                        "1"});
            table1.AddRow(new string[] {
                        "Military service",
                        "",
                        "2"});
            table1.AddRow(new string[] {
                        "Retirement",
                        "",
                        ""});
            table1.AddRow(new string[] {
                        "Divorce",
                        "",
                        ""});
            table1.AddRow(new string[] {
                        "Moving",
                        "",
                        ""});
            table1.AddRow(new string[] {
                        "Moving away from Finland",
                        "Moving",
                        "2"});
            table1.AddRow(new string[] {
                        "Moving back to Finland",
                        "Moving",
                        "3"});
            table1.AddRow(new string[] {
                        "Moving away from home",
                        "Moving",
                        "1"});
#line 4
 testRunner.Given("there are following life events:", ((string)(null)), table1, "Given ");
#line 15
 testRunner.When("the life events are retrievd", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table2.AddRow(new string[] {
                        "Getting a child"});
            table2.AddRow(new string[] {
                        "Military service"});
            table2.AddRow(new string[] {
                        "Divorce"});
            table2.AddRow(new string[] {
                        "Moving"});
            table2.AddRow(new string[] {
                        "Retirement"});
#line 16
 testRunner.Then("the following main life events are received:", ((string)(null)), table2, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table3.AddRow(new string[] {
                        "Adoption"});
#line 23
 testRunner.And("life event \'Getting a child\' has the following child life events:", ((string)(null)), table3, "And ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table4.AddRow(new string[] {
                        "Moving away from home"});
            table4.AddRow(new string[] {
                        "Moving away from Finland"});
            table4.AddRow(new string[] {
                        "Moving back to Finland"});
#line 26
 testRunner.And("life event \'Moving\' has the following child life events:", ((string)(null)), table4, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Getting ordered service class hierarchy")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Classification")]
        public virtual void GettingOrderedServiceClassHierarchy()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Getting ordered service class hierarchy", ((string[])(null)));
#line 32
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Parent",
                        "Order"});
            table5.AddRow(new string[] {
                        "Family services",
                        "",
                        "1"});
            table5.AddRow(new string[] {
                        "Getting a child",
                        "Family services",
                        "1"});
            table5.AddRow(new string[] {
                        "Children daycare",
                        "Family services",
                        "2"});
            table5.AddRow(new string[] {
                        "Democracy",
                        "",
                        "2"});
            table5.AddRow(new string[] {
                        "Parties",
                        "Democracy",
                        "1"});
            table5.AddRow(new string[] {
                        "Elections",
                        "Democracy",
                        "2"});
#line 33
 testRunner.Given("there are following service classes:", ((string)(null)), table5, "Given ");
#line 41
 testRunner.When("the service classes are retrievd", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table6.AddRow(new string[] {
                        "Family services"});
            table6.AddRow(new string[] {
                        "Democracy"});
#line 42
 testRunner.Then("the following main service classes are received:", ((string)(null)), table6, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table7.AddRow(new string[] {
                        "Getting a child"});
            table7.AddRow(new string[] {
                        "Children daycare"});
#line 46
 testRunner.And("service class \'Family services\' has the following child service classes:", ((string)(null)), table7, "And ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table8.AddRow(new string[] {
                        "Parties"});
            table8.AddRow(new string[] {
                        "Elections"});
#line 50
 testRunner.And("service class \'Democracy\' has the following child service classes:", ((string)(null)), table8, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Getting ordered ontology term hierarchy")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Classification")]
        public virtual void GettingOrderedOntologyTermHierarchy()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Getting ordered ontology term hierarchy", ((string[])(null)));
#line 55
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Parent",
                        "Order"});
            table9.AddRow(new string[] {
                        "Teaching",
                        "",
                        "2"});
            table9.AddRow(new string[] {
                        "Daycare",
                        "",
                        "1"});
            table9.AddRow(new string[] {
                        "Languages",
                        "Daycare",
                        "1"});
            table9.AddRow(new string[] {
                        "Arabic",
                        "Languages",
                        "1"});
            table9.AddRow(new string[] {
                        "Spanish",
                        "Languages",
                        "3"});
            table9.AddRow(new string[] {
                        "English",
                        "Languages",
                        "2"});
#line 56
 testRunner.Given("there are following ontology terms:", ((string)(null)), table9, "Given ");
#line 64
 testRunner.When("the ontology terms are retrievd", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table10.AddRow(new string[] {
                        "Daycare"});
            table10.AddRow(new string[] {
                        "Teaching"});
#line 65
 testRunner.Then("the following main ontology terms are received:", ((string)(null)), table10, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table11.AddRow(new string[] {
                        "Languages"});
#line 69
 testRunner.And("ontology term \'Daycare\' has the following child ontology terms:", ((string)(null)), table11, "And ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table12.AddRow(new string[] {
                        "Arabic"});
            table12.AddRow(new string[] {
                        "English"});
            table12.AddRow(new string[] {
                        "Spanish"});
#line 72
 testRunner.And("ontology term \'Languages\' has the following child ontology terms:", ((string)(null)), table12, "And ");
#line 77
 testRunner.And("ontology term \'Teaching\' has no child ontology terms", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Getting ordered target group hierarchy")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Classification")]
        public virtual void GettingOrderedTargetGroupHierarchy()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Getting ordered target group hierarchy", ((string[])(null)));
#line 79
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Parent",
                        "Order"});
            table13.AddRow(new string[] {
                        "Companies",
                        "",
                        "2"});
            table13.AddRow(new string[] {
                        "Citizens",
                        "",
                        "1"});
            table13.AddRow(new string[] {
                        "Elderly people",
                        "Citizens",
                        "1"});
            table13.AddRow(new string[] {
                        "Children",
                        "Citizens",
                        "2"});
            table13.AddRow(new string[] {
                        "Inventors",
                        "Companies",
                        "2"});
            table13.AddRow(new string[] {
                        "International companies",
                        "Companies",
                        "1"});
#line 80
 testRunner.Given("there are following target groups:", ((string)(null)), table13, "Given ");
#line 88
 testRunner.When("the target groups are retrievd", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table14.AddRow(new string[] {
                        "Citizens"});
            table14.AddRow(new string[] {
                        "Companies"});
#line 89
 testRunner.Then("the following main target groups are received:", ((string)(null)), table14, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table15.AddRow(new string[] {
                        "International companies"});
            table15.AddRow(new string[] {
                        "Inventors"});
#line 93
 testRunner.And("target group \'Companies\' has the following child target groups:", ((string)(null)), table15, "And ");
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table16.AddRow(new string[] {
                        "Elderly people"});
            table16.AddRow(new string[] {
                        "Children"});
#line 97
 testRunner.And("target group \'Citizens\' has the following child target groups:", ((string)(null)), table16, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Getting ordered flat ontology term list")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Classification")]
        public virtual void GettingOrderedFlatOntologyTermList()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Getting ordered flat ontology term list", ((string[])(null)));
#line 102
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Parent",
                        "Order"});
            table17.AddRow(new string[] {
                        "Teaching",
                        "",
                        ""});
            table17.AddRow(new string[] {
                        "Day",
                        "",
                        ""});
            table17.AddRow(new string[] {
                        "A Day in a Verse",
                        "",
                        ""});
            table17.AddRow(new string[] {
                        "Daytime saving",
                        "",
                        ""});
            table17.AddRow(new string[] {
                        "night and day",
                        "",
                        ""});
            table17.AddRow(new string[] {
                        "daycare",
                        "Teaching",
                        ""});
#line 103
 testRunner.Given("there are following ontology terms:", ((string)(null)), table17, "Given ");
#line 111
 testRunner.When("ontology terms are searched with text \'Day\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table18.AddRow(new string[] {
                        "Day"});
            table18.AddRow(new string[] {
                        "daycare"});
            table18.AddRow(new string[] {
                        "Daytime saving"});
            table18.AddRow(new string[] {
                        "A Day in a Verse"});
            table18.AddRow(new string[] {
                        "night and day"});
#line 112
 testRunner.Then("the following ontology terms are received:", ((string)(null)), table18, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Getting ontology term list with only best matches")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Classification")]
        public virtual void GettingOntologyTermListWithOnlyBestMatches()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Getting ontology term list with only best matches", ((string[])(null)));
#line 120
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Parent",
                        "Order"});
            table19.AddRow(new string[] {
                        "Teaching",
                        "",
                        ""});
            table19.AddRow(new string[] {
                        "Day",
                        "",
                        ""});
            table19.AddRow(new string[] {
                        "A Day in a Verse",
                        "",
                        ""});
            table19.AddRow(new string[] {
                        "Daytime saving",
                        "",
                        ""});
            table19.AddRow(new string[] {
                        "night and day",
                        "",
                        ""});
            table19.AddRow(new string[] {
                        "daycare",
                        "Teaching",
                        ""});
#line 121
 testRunner.Given("there are following ontology terms:", ((string)(null)), table19, "Given ");
#line 129
 testRunner.When("ontology terms are searched with text \'Day\' and a maximum result amount of \'4\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table20.AddRow(new string[] {
                        "Day"});
            table20.AddRow(new string[] {
                        "daycare"});
            table20.AddRow(new string[] {
                        "Daytime saving"});
            table20.AddRow(new string[] {
                        "A Day in a Verse"});
#line 130
 testRunner.Then("the following ontology terms are received:", ((string)(null)), table20, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Ontology terms cannot be searched with less than two character text")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Classification")]
        public virtual void OntologyTermsCannotBeSearchedWithLessThanTwoCharacterText()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Ontology terms cannot be searched with less than two character text", ((string[])(null)));
#line 137
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Parent",
                        "Order"});
            table21.AddRow(new string[] {
                        "Teaching",
                        "",
                        ""});
            table21.AddRow(new string[] {
                        "Day",
                        "",
                        ""});
            table21.AddRow(new string[] {
                        "A Day in a Verse",
                        "",
                        ""});
            table21.AddRow(new string[] {
                        "Daytime saving",
                        "",
                        ""});
            table21.AddRow(new string[] {
                        "Daycare",
                        "Teaching",
                        ""});
#line 138
 testRunner.Given("there are following ontology terms:", ((string)(null)), table21, "Given ");
#line 145
 testRunner.When("ontology terms are searched with text \'a\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 146
 testRunner.Then("no ontology terms are received", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
