// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace OrganizationRegister.AcceptanceTests.Features.Organization
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class UpdatingOrganizationVisitingAddressFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "UpdatingOrganizationVisitingAddress.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "UpdatingOrganizationVisitingAddress", "", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null) 
                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "UpdatingOrganizationVisitingAddress")))
            {
                OrganizationRegister.AcceptanceTests.Features.Organization.UpdatingOrganizationVisitingAddressFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
#line 4
 testRunner.Given("there is an organization", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Setting organization visiting address")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "UpdatingOrganizationVisitingAddress")]
        public virtual void SettingOrganizationVisitingAddress()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Setting organization visiting address", ((string[])(null)));
#line 6
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Finnish street address",
                        "Swedish street address",
                        "Finnish postal district",
                        "Swedish postal district",
                        "Finnish qualifier",
                        "Swedish qualifier",
                        "Postal code"});
            table1.AddRow(new string[] {
                        "Helsingintie 15",
                        "Helsinforsvägen 15",
                        "Turku",
                        "Åbo",
                        "Vaaleanpunaisen possun vieressä",
                        "Nära svin",
                        "21500"});
#line 7
 testRunner.When("the following visiting address is set to the organization:", ((string)(null)), table1, "When ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Finnish street address",
                        "Swedish street address",
                        "Finnish postal district",
                        "Swedish postal district",
                        "Finnish qualifier",
                        "Swedish qualifier",
                        "Postal code"});
            table2.AddRow(new string[] {
                        "Helsingintie 15",
                        "Helsinforsvägen 15",
                        "Turku",
                        "Åbo",
                        "Vaaleanpunaisen possun vieressä",
                        "Nära svin",
                        "21500"});
#line 10
 testRunner.Then("the organization has the following visiting address:", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Setting organization visiting address again")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "UpdatingOrganizationVisitingAddress")]
        public virtual void SettingOrganizationVisitingAddressAgain()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Setting organization visiting address again", ((string[])(null)));
#line 14
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Finnish street address",
                        "Swedish street address",
                        "Finnish postal district",
                        "Swedish postal district",
                        "Finnish qualifier",
                        "Swedish qualifier",
                        "Postal code"});
            table3.AddRow(new string[] {
                        "Helsingintie 15",
                        "Helsinforsvägen 15",
                        "Turku",
                        "Åbo",
                        "Vaaleanpunaisen possun vieressä",
                        "Nära svin",
                        "21500"});
#line 15
 testRunner.Given("the following visiting address is set to the organization:", ((string)(null)), table3, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Finnish street address",
                        "Swedish street address",
                        "Finnish postal district",
                        "Swedish postal district",
                        "Finnish qualifier",
                        "Postal code"});
            table4.AddRow(new string[] {
                        "Helsinginkatu 15",
                        "Helsinforsgatan 15",
                        "Turku",
                        "Åbo",
                        "Piipun vieressä",
                        "25100"});
#line 18
 testRunner.When("the following visiting address is set to the organization:", ((string)(null)), table4, "When ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Finnish street address",
                        "Swedish street address",
                        "Finnish postal district",
                        "Swedish postal district",
                        "Finnish qualifier",
                        "Swedish qualifier",
                        "Postal code"});
            table5.AddRow(new string[] {
                        "Helsinginkatu 15",
                        "Helsinforsgatan 15",
                        "Turku",
                        "Åbo",
                        "Piipun vieressä",
                        "",
                        "25100"});
#line 21
 testRunner.Then("the organization has the following visiting address:", ((string)(null)), table5, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Organization can have no visiting address")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "UpdatingOrganizationVisitingAddress")]
        public virtual void OrganizationCanHaveNoVisitingAddress()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Organization can have no visiting address", ((string[])(null)));
#line 25
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line 26
 testRunner.When("visiting address of the organization is set as empty", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 27
 testRunner.Then("the organization has no visiting address", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Setting invalid postal code")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "UpdatingOrganizationVisitingAddress")]
        public virtual void SettingInvalidPostalCode()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Setting invalid postal code", ((string[])(null)));
#line 29
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Finnish street address",
                        "Swedish street address",
                        "Finnish postal district",
                        "Swedish postal district",
                        "Finnish qualifier",
                        "Postal code"});
            table6.AddRow(new string[] {
                        "Helsinginkatu 15",
                        "Helsinforsgatan 15",
                        "Turku",
                        "Åbo",
                        "Piipun vieressä",
                        "251000"});
#line 30
 testRunner.When("the following visiting address is set to the organization:", ((string)(null)), table6, "When ");
#line 33
 testRunner.Then("setting the visiting address fails", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
