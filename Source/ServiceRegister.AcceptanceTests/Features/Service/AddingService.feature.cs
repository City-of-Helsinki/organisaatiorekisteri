// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ServiceRegister.AcceptanceTests.Features.Service
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class AddingServiceFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "AddingService.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "AddingService", "", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null) 
                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "AddingService")))
            {
                ServiceRegister.AcceptanceTests.Features.Service.AddingServiceFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
#line 4
 testRunner.Given("there is an organization", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Adding a service with only mandatory information")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AddingService")]
        public virtual void AddingAServiceWithOnlyMandatoryInformation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Adding a service with only mandatory information", ((string[])(null)));
#line 6
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Finnish name",
                        "Swedish name",
                        "Finnish description",
                        "Swedish description",
                        "Finnish short description",
                        "Swedish short description",
                        "Languages"});
            table1.AddRow(new string[] {
                        "Päivähoito",
                        "Dagvård",
                        "Hoidetaan lapsia",
                        "Behandlar barn",
                        "Lapsitarha",
                        "Barnet trädgården",
                        "fi, sv"});
#line 7
 testRunner.When("the following service is added to the organization:", ((string)(null)), table1, "When ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Finnish name",
                        "Swedish name",
                        "Finnish description",
                        "Swedish description",
                        "Finnish short description",
                        "Swedish short description",
                        "Languages"});
            table2.AddRow(new string[] {
                        "Päivähoito",
                        "Dagvård",
                        "Hoidetaan lapsia",
                        "Behandlar barn",
                        "Lapsitarha",
                        "Barnet trädgården",
                        "sv, fi"});
#line 10
 testRunner.Then("the organization has the following service:", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Adding a service with all basic information")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AddingService")]
        public virtual void AddingAServiceWithAllBasicInformation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Adding a service with all basic information", ((string[])(null)));
#line 14
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Finnish name",
                        "Swedish name",
                        "Finnish alternate name",
                        "Swedish alternate name",
                        "Finnish description",
                        "Swedish description",
                        "Finnish short description",
                        "Swedish short description",
                        "Languages",
                        "Finnish user instructions",
                        "Swedish user instructions",
                        "Finnish requirements",
                        "Swedish requirements"});
            table3.AddRow(new string[] {
                        "Päivähoito",
                        "Dagvård",
                        "Päiväkoti",
                        "DagHem",
                        "Hoidetaan lapsia",
                        "Behandlar barn",
                        "Lapsitarha",
                        "Barnet trädgården",
                        "fi, sv",
                        "Tuo lapset aamulla",
                        "Barn ska komma i morgon",
                        "Tarpeeksi hoitajia",
                        "Några sjukskötare"});
#line 15
 testRunner.When("the following service is added to the organization:", ((string)(null)), table3, "When ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Finnish name",
                        "Swedish name",
                        "Finnish alternate name",
                        "Swedish alternate name",
                        "Finnish description",
                        "Swedish description",
                        "Finnish short description",
                        "Swedish short description",
                        "Languages",
                        "Finnish user instructions",
                        "Swedish user instructions",
                        "Finnish requirements",
                        "Swedish requirements"});
            table4.AddRow(new string[] {
                        "Päivähoito",
                        "Dagvård",
                        "Päiväkoti",
                        "DagHem",
                        "Hoidetaan lapsia",
                        "Behandlar barn",
                        "Lapsitarha",
                        "Barnet trädgården",
                        "sv, fi",
                        "Tuo lapset aamulla",
                        "Barn ska komma i morgon",
                        "Tarpeeksi hoitajia",
                        "Några sjukskötare"});
#line 18
 testRunner.Then("the organization has the following service:", ((string)(null)), table4, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
