// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ServiceRegister.AcceptanceTests.Features.Service
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class UpdatingServiceBasicInformationFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "UpdatingServiceBasicInformation.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "UpdatingServiceBasicInformation", "", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null) 
                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "UpdatingServiceBasicInformation")))
            {
                ServiceRegister.AcceptanceTests.Features.Service.UpdatingServiceBasicInformationFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
#line 4
 testRunner.Given("there is an organization", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 5
 testRunner.And("there is a service", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Changing service basic information")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "UpdatingServiceBasicInformation")]
        public virtual void ChangingServiceBasicInformation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Changing service basic information", ((string[])(null)));
#line 7
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Finnish name",
                        "Swedish name",
                        "Finnish alternate name",
                        "Swedish alternate name",
                        "Finnish description",
                        "Swedish description",
                        "Finnish short description",
                        "Swedish short description",
                        "Languages",
                        "Finnish user instructions",
                        "Swedish user instructions",
                        "Finnish requirements",
                        "Swedish requirements"});
            table1.AddRow(new string[] {
                        "Päivähoito",
                        "Dagvård",
                        "Päiväkoti",
                        "DagHem",
                        "Hoidetaan lapsia",
                        "Behandlar barn",
                        "Lapsitarha",
                        "Barnet trädgården",
                        "fi, sv",
                        "Tuo lapset aamulla",
                        "Barn ska komma i morgon",
                        "Tarpeeksi hoitajia",
                        "Några sjukskötare"});
#line 8
 testRunner.When("the following basic information is set to the service", ((string)(null)), table1, "When ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Finnish name",
                        "Swedish name",
                        "Finnish alternate name",
                        "Swedish alternate name",
                        "Finnish description",
                        "Swedish description",
                        "Finnish short description",
                        "Swedish short description",
                        "Languages",
                        "Finnish user instructions",
                        "Swedish user instructions",
                        "Finnish requirements",
                        "Swedish requirements"});
            table2.AddRow(new string[] {
                        "Päivähoito",
                        "Dagvård",
                        "Päiväkoti",
                        "DagHem",
                        "Hoidetaan lapsia",
                        "Behandlar barn",
                        "Lapsitarha",
                        "Barnet trädgården",
                        "sv, fi",
                        "Tuo lapset aamulla",
                        "Barn ska komma i morgon",
                        "Tarpeeksi hoitajia",
                        "Några sjukskötare"});
#line 11
 testRunner.Then("the organization has the following service:", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Setting only mandatory service basic information")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "UpdatingServiceBasicInformation")]
        public virtual void SettingOnlyMandatoryServiceBasicInformation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Setting only mandatory service basic information", ((string[])(null)));
#line 15
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Finnish name",
                        "Swedish name",
                        "Finnish description",
                        "Swedish description",
                        "Finnish short description",
                        "Swedish short description",
                        "Languages"});
            table3.AddRow(new string[] {
                        "Päivähoito",
                        "Dagvård",
                        "Hoidetaan lapsia",
                        "Behandlar barn",
                        "Lapsitarha",
                        "Barnet trädgården",
                        "fi, sv"});
#line 16
 testRunner.When("the following basic information is set to the service", ((string)(null)), table3, "When ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Finnish name",
                        "Swedish name",
                        "Finnish description",
                        "Swedish description",
                        "Finnish short description",
                        "Swedish short description",
                        "Languages"});
            table4.AddRow(new string[] {
                        "Päivähoito",
                        "Dagvård",
                        "Hoidetaan lapsia",
                        "Behandlar barn",
                        "Lapsitarha",
                        "Barnet trädgården",
                        "sv, fi"});
#line 19
 testRunner.Then("the organization has the following service:", ((string)(null)), table4, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Claering service optional information")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "UpdatingServiceBasicInformation")]
        public virtual void ClaeringServiceOptionalInformation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Claering service optional information", ((string[])(null)));
#line 23
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Finnish name",
                        "Swedish name",
                        "Finnish alternate name",
                        "Swedish alternate name",
                        "Finnish description",
                        "Swedish description",
                        "Finnish short description",
                        "Swedish short description",
                        "Languages",
                        "Finnish user instructions",
                        "Swedish user instructions",
                        "Finnish requirements",
                        "Swedish requirements"});
            table5.AddRow(new string[] {
                        "Päivähoito",
                        "Dagvård",
                        "Päiväkoti",
                        "DagHem",
                        "Hoidetaan lapsia",
                        "Behandlar barn",
                        "Lapsitarha",
                        "Barnet trädgården",
                        "fi, sv",
                        "Tuo lapset aamulla",
                        "Barn ska komma i morgon",
                        "Tarpeeksi hoitajia",
                        "Några sjukskötare"});
#line 24
 testRunner.Given("the following basic information is set to the service", ((string)(null)), table5, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Finnish name",
                        "Swedish name",
                        "Finnish description",
                        "Swedish description",
                        "Finnish short description",
                        "Swedish short description",
                        "Languages"});
            table6.AddRow(new string[] {
                        "Päivähoito",
                        "Dagvård",
                        "Hoidetaan lapsia",
                        "Behandlar barn",
                        "Lapsitarha",
                        "Barnet trädgården",
                        "fi, sv"});
#line 27
 testRunner.When("the following basic information is set to the service", ((string)(null)), table6, "When ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Finnish name",
                        "Swedish name",
                        "Finnish description",
                        "Swedish description",
                        "Finnish short description",
                        "Swedish short description",
                        "Languages"});
            table7.AddRow(new string[] {
                        "Päivähoito",
                        "Dagvård",
                        "Hoidetaan lapsia",
                        "Behandlar barn",
                        "Lapsitarha",
                        "Barnet trädgården",
                        "sv, fi"});
#line 30
 testRunner.Then("the organization has the following service:", ((string)(null)), table7, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
