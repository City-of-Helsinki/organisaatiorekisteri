// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ServiceRegister.AcceptanceTests.Features.Service
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class UpdatingServiceClassificationFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "UpdatingServiceClassification.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "UpdatingServiceClassification", "", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null) 
                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "UpdatingServiceClassification")))
            {
                ServiceRegister.AcceptanceTests.Features.Service.UpdatingServiceClassificationFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
#line 4
 testRunner.Given("there is an organization", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 5
 testRunner.And("there is a service", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Parent"});
            table1.AddRow(new string[] {
                        "Family services",
                        ""});
            table1.AddRow(new string[] {
                        "Getting a child",
                        "Family services"});
            table1.AddRow(new string[] {
                        "Children daycare",
                        "Family services"});
            table1.AddRow(new string[] {
                        "Democracy",
                        ""});
            table1.AddRow(new string[] {
                        "Parties",
                        "Democracy"});
            table1.AddRow(new string[] {
                        "Elections",
                        "Democracy"});
#line 6
 testRunner.And("there are following service classes:", ((string)(null)), table1, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Parent"});
            table2.AddRow(new string[] {
                        "Teaching",
                        ""});
            table2.AddRow(new string[] {
                        "Daycare",
                        ""});
            table2.AddRow(new string[] {
                        "Languages",
                        "Daycare"});
            table2.AddRow(new string[] {
                        "Arabic",
                        "Languages"});
            table2.AddRow(new string[] {
                        "Spanish",
                        "Languages"});
            table2.AddRow(new string[] {
                        "English",
                        "Languages"});
#line 14
 testRunner.And("there are following ontology terms:", ((string)(null)), table2, "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Parent"});
            table3.AddRow(new string[] {
                        "Companies",
                        ""});
            table3.AddRow(new string[] {
                        "Citizens",
                        ""});
            table3.AddRow(new string[] {
                        "Elderly people",
                        "Citizens"});
            table3.AddRow(new string[] {
                        "Children",
                        "Citizens"});
            table3.AddRow(new string[] {
                        "Inventors",
                        "Companies"});
            table3.AddRow(new string[] {
                        "International companies",
                        "Companies"});
#line 22
 testRunner.And("there are following target groups:", ((string)(null)), table3, "And ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Parent"});
            table4.AddRow(new string[] {
                        "Getting a child",
                        ""});
            table4.AddRow(new string[] {
                        "Adoption",
                        "Getting a child"});
            table4.AddRow(new string[] {
                        "Military service",
                        ""});
            table4.AddRow(new string[] {
                        "Retirement",
                        ""});
            table4.AddRow(new string[] {
                        "Divorce",
                        ""});
            table4.AddRow(new string[] {
                        "Moving",
                        ""});
            table4.AddRow(new string[] {
                        "Moving away from Finland",
                        "Moving"});
            table4.AddRow(new string[] {
                        "Moving back to Finland",
                        "Moving"});
            table4.AddRow(new string[] {
                        "Moving away from home",
                        "Moving"});
#line 30
 testRunner.And("there are following life events:", ((string)(null)), table4, "And ");
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Setting service classification")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "UpdatingServiceClassification")]
        public virtual void SettingServiceClassification()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Setting service classification", ((string[])(null)));
#line 42
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Service classes",
                        "Ontology terms",
                        "Target groups",
                        "Life events",
                        "Finnish keywords",
                        "Swedish keywords"});
            table5.AddRow(new string[] {
                        "Getting a child, Family services",
                        "Teaching, Daycare, Languages",
                        "Citizens",
                        "Retirement, Divorce",
                        "perhe, lapset",
                        "familjen, barnen"});
#line 43
 testRunner.When("the following classification is set to the service:", ((string)(null)), table5, "When ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Service classes",
                        "Ontology terms",
                        "Target groups",
                        "Life events",
                        "Finnish keywords",
                        "Swedish keywords"});
            table6.AddRow(new string[] {
                        "Family services, Getting a child",
                        "Daycare, Languages, Teaching",
                        "Citizens",
                        "Retirement, Divorce",
                        "lapset, perhe",
                        "barnen, familjen"});
#line 46
 testRunner.Then("the service has the following classification:", ((string)(null)), table6, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Setting service classification again")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "UpdatingServiceClassification")]
        public virtual void SettingServiceClassificationAgain()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Setting service classification again", ((string[])(null)));
#line 50
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Service classes",
                        "Ontology terms",
                        "Target groups",
                        "Life events",
                        "Finnish keywords",
                        "Swedish keywords"});
            table7.AddRow(new string[] {
                        "Family services",
                        "Daycare, Languages",
                        "Companies",
                        "Military service, Moving",
                        "perhe",
                        "familjen"});
#line 51
 testRunner.Given("the following classification is set to the service:", ((string)(null)), table7, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Service classes",
                        "Ontology terms",
                        "Target groups",
                        "Life events",
                        "Finnish keywords",
                        "Swedish keywords"});
            table8.AddRow(new string[] {
                        "Family services, Getting a child",
                        "Teaching, Daycare, Languages",
                        "Citizens",
                        "Retirement, Divorce",
                        "perhe, lapset",
                        "familjen, barnen"});
#line 54
 testRunner.When("the following classification is set to the service:", ((string)(null)), table8, "When ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Service classes",
                        "Ontology terms",
                        "Target groups",
                        "Life events",
                        "Finnish keywords",
                        "Swedish keywords"});
            table9.AddRow(new string[] {
                        "Family services, Getting a child",
                        "Daycare, Languages, Teaching",
                        "Citizens",
                        "Retirement, Divorce",
                        "lapset, perhe",
                        "barnen, familjen"});
#line 57
 testRunner.Then("the service has the following classification:", ((string)(null)), table9, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Setting only mandatory classification")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "UpdatingServiceClassification")]
        public virtual void SettingOnlyMandatoryClassification()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Setting only mandatory classification", ((string[])(null)));
#line 61
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Service classes",
                        "Ontology terms",
                        "Target groups",
                        "Life events",
                        "Finnish keywords",
                        "Swedish keywords"});
            table10.AddRow(new string[] {
                        "Family services, Getting a child",
                        "Teaching, Daycare, Languages",
                        "Citizens",
                        "",
                        "",
                        ""});
#line 62
 testRunner.When("the following classification is set to the service:", ((string)(null)), table10, "When ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Service classes",
                        "Ontology terms",
                        "Target groups",
                        "Life events",
                        "Finnish keywords",
                        "Swedish keywords"});
            table11.AddRow(new string[] {
                        "Family services, Getting a child",
                        "Daycare, Languages, Teaching",
                        "Citizens",
                        "",
                        "",
                        ""});
#line 65
 testRunner.Then("the service has the following classification:", ((string)(null)), table11, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
