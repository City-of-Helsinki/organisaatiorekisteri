// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ServiceRegister.AcceptanceTests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class SettingsFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Settings.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Settings", "", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null) 
                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "Settings")))
            {
                ServiceRegister.AcceptanceTests.Features.SettingsFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Organization types")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Settings")]
        public virtual void OrganizationTypes()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Organization types", ((string[])(null)));
#line 3
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Organization type"});
            table1.AddRow(new string[] {
                        "Municipality"});
            table1.AddRow(new string[] {
                        "State"});
            table1.AddRow(new string[] {
                        "Company"});
#line 4
 testRunner.Given("the following organization types exist:", ((string)(null)), table1, "Given ");
#line 9
 testRunner.When("organization types are retrieved", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Organization type"});
            table2.AddRow(new string[] {
                        "Municipality"});
            table2.AddRow(new string[] {
                        "State"});
            table2.AddRow(new string[] {
                        "Company"});
#line 10
 testRunner.Then("the following organization types are returned", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Web page types")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Settings")]
        public virtual void WebPageTypes()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Web page types", ((string[])(null)));
#line 16
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Web page type"});
            table3.AddRow(new string[] {
                        "Kotisivu"});
            table3.AddRow(new string[] {
                        "Sosiaalisen median palvelu"});
#line 17
 testRunner.Given("the following web page types exist:", ((string)(null)), table3, "Given ");
#line 21
 testRunner.When("web page types are retrieved", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Web page type"});
            table4.AddRow(new string[] {
                        "Kotisivu"});
            table4.AddRow(new string[] {
                        "Sosiaalisen median palvelu"});
#line 22
 testRunner.Then("the following web page types are returned", ((string)(null)), table4, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Service languages")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Settings")]
        public virtual void ServiceLanguages()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Service languages", ((string[])(null)));
#line 27
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Language code",
                        "Language name"});
            table5.AddRow(new string[] {
                        "fi",
                        "Finnish"});
            table5.AddRow(new string[] {
                        "sv",
                        "Swedish"});
            table5.AddRow(new string[] {
                        "en",
                        "English"});
            table5.AddRow(new string[] {
                        "ar",
                        "Arabic"});
            table5.AddRow(new string[] {
                        "et",
                        "Estonian"});
#line 28
 testRunner.Given("the languages exist:", ((string)(null)), table5, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Language code",
                        "Order number"});
            table6.AddRow(new string[] {
                        "fi",
                        "2"});
            table6.AddRow(new string[] {
                        "en",
                        ""});
            table6.AddRow(new string[] {
                        "sv",
                        "1"});
            table6.AddRow(new string[] {
                        "ar",
                        ""});
#line 35
 testRunner.And("the following languages can be used with services", ((string)(null)), table6, "And ");
#line 41
 testRunner.When("service languages are retrieved", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Language code",
                        "Language name"});
            table7.AddRow(new string[] {
                        "sv",
                        "Swedish"});
            table7.AddRow(new string[] {
                        "fi",
                        "Finnish"});
            table7.AddRow(new string[] {
                        "ar",
                        "Arabic"});
            table7.AddRow(new string[] {
                        "en",
                        "English"});
#line 42
 testRunner.Then("the following service languages are returned in the following order:", ((string)(null)), table7, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
